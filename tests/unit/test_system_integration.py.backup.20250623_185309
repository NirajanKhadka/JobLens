#!/usr/bin/env python3
"""
Comprehensive System Integration Test
Tests all core modules and their integration to ensure everything works properly.
"""

import sys
import time
import traceback
from pathlib import Path
from typing import Dict, List, Tuple
from rich.console import Console
from rich.panel import Panel
from rich.table import Table

# Add project root to Python path for src imports
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

console = Console()

class SystemIntegrationTest:
    """Comprehensive system integration test suite."""
    
    def __init__(self):
        self.results = {}
        self.profile = None
        
    def run_all_tests(self) -> bool:
        """Run all integration tests."""
        console.print(Panel("üß™ AutoJobAgent System Integration Test", style="bold blue"))
        
        tests = [
            ("Core Imports", self.test_core_imports),
            ("Profile System", self.test_profile_system),
            ("Database System", self.test_database_system),
            ("Scraper Registry", self.test_scraper_registry),
            ("ATS System", self.test_ats_system),
            ("Document Generator", self.test_document_generator),
            ("Ollama Integration", self.test_ollama_integration),
            ("Browser System", self.test_browser_system),
            ("Dashboard API", self.test_dashboard_api),
            ("Session Management", self.test_session_management)
        ]
        
        passed = 0
        for test_name, test_func in tests:
            console.print(f"\nTesting {test_name}...")
            try:
                result = test_func()
                self.results[test_name] = result
                if result:
                    passed += 1
                    console.print(f"‚úÖ {test_name} passed")
                else:
                    console.print(f"‚ùå {test_name} failed")
            except Exception as e:
                console.print(f"‚ùå {test_name} error: {e}")
                self.results[test_name] = False
        
        self.print_results(passed, len(tests))
        return passed == len(tests)
    
    def test_core_imports(self) -> bool:
        """Test that all core modules import correctly."""
        modules = [
            "src.core.utils", "scrapers", "src.utils.document_generator", 
            "src.dashboard.api", "src.ats.csv_applicator", "src.core.job_database"
        ]
        
        for module in modules:
            try:
                __import__(module)
                console.print(f"  ‚úÖ {module}")
            except ImportError as e:
                console.print(f"  ‚ùå {module}: {e}")
                return False
        
        return True
    
    def test_profile_system(self) -> bool:
        """Test profile loading and validation."""
        try:
            from src.core.utils import load_profile
            
            # Test loading a profile
            self.profile = load_profile("Nirajan")
            console.print(f"  ‚úÖ Profile loaded: {self.profile.get('name', 'Unknown')}")
            console.print(f"  ‚úÖ Keywords: {len(self.profile.get('keywords', []))}")
            
            # Test profile validation
            required_fields = ['name', 'keywords', 'profile_name']
            for field in required_fields:
                if field not in self.profile:
                    console.print(f"  ‚ùå Profile test error: '{field}'")
                    return False
            
            return True
            
        except Exception as e:
            console.print(f"  ‚ùå Profile test error: {e}")
            return False
    
    def test_database_system(self) -> bool:
        """Test database operations."""
        try:
            from src.core.job_database import get_job_db
            
            # Test database connection
            db = get_job_db("test_profile")
            
            # Test adding a job
            test_job = {
                "title": "Test Job",
                "company": "Test Company",
                "url": "https://example.com/job",
                "location": "Test Location",
                "scraped_at": time.time()
            }
            
            result = db.add_jobs_batch([test_job])
            console.print(f"  ‚úÖ Database test: {result} jobs added")
            
            return True
            
        except Exception as e:
            console.print(f"  ‚ùå Database test error: {e}")
            return False
    
    def test_scraper_registry(self) -> bool:
        """Test scraper registration and availability."""
        try:
            from src.scrapers import get_scraper, get_available_sites
            import traceback
            
            # Test getting available sites
            sites = get_available_sites()
            console.print(f"  ‚úÖ {len(sites)} scrapers available: {', '.join(sites)}")
            
            # Test getting a specific scraper (use first available)
            if sites:
                first_site = sites[0]
                try:
                    scraper = get_scraper(first_site, self.profile or {})
                    console.print(f"  ‚úÖ Scraper creation successful for {first_site}")
                except Exception as e:
                    console.print(f"  ‚ùå Exception during scraper creation for {first_site}: {e}")
                    traceback.print_exc()
                    return False
            else:
                console.print(f"  ‚ö†Ô∏è No scrapers available")
            
            return True
            
        except Exception as e:
            import traceback
            console.print(f"  ‚ùå Scraper registry error: {e}")
            traceback.print_exc()
            return False
    
    def test_ats_system(self) -> bool:
        """Test ATS detection and submitter registry."""
        try:
            from src.ats import detect
            
            # Test ATS detection
            test_urls = {
                "https://myworkdayjobs.com/test": "workday",
                "https://jobs.icims.com/test": "icims",
                "https://boards.greenhouse.io/test": "greenhouse",
                "https://unknown-site.com/job": "unknown"
            }
            
            for url, expected in test_urls.items():
                detected = detect(url)
                if detected != expected:
                    console.print(f"  ‚ùå ATS detection failed for {url}: got {detected}, expected {expected}")
                    return False
            
            # Test supported ATS list
            console.print(f"  ‚úÖ ATS detection working")
            
            return True
            
        except Exception as e:
            console.print(f"  ‚ùå ATS system error: {e}")
            return False
    
    def test_document_generator(self) -> bool:
        """Test document generation system."""
        try:
            from src.utils.document_generator import DocumentGenerator
            
            # Test document generator initialization
            generator = DocumentGenerator()
            
            # Test document customization
            test_job = {
                "title": "Test Data Analyst",
                "company": "Test Company",
                "description": "Test job description"
            }
            
            # Check if the method exists, if not, skip the test
            if hasattr(generator, 'customize_documents'):
                result = generator.customize_documents(test_job, self.profile or {})
                console.print(f"  ‚úÖ Document generation successful")
            else:
                console.print(f"  ‚ö†Ô∏è Document generation method not available")
            
            return True
            
        except Exception as e:
            console.print(f"  ‚ö†Ô∏è Document generation error (may need templates): {e}")
            return True  # Not critical for system operation
    
    def test_ollama_integration(self) -> bool:
        """Test Ollama integration."""
        try:
            # Try to import OllamaManager, if not available, use alternative approach
            try:
                from src.core.ollama_manager import OllamaManager
                ollama = OllamaManager()
                models = ollama.get_available_models()
                console.print(f"  ‚úÖ Ollama running with {len(models)} models")
            except ImportError:
                # Fallback: check if ollama service is available
                import subprocess
                try:
                    result = subprocess.run(['ollama', 'list'], capture_output=True, text=True)
                    if result.returncode == 0:
                        console.print(f"  ‚úÖ Ollama service available")
                    else:
                        console.print(f"  ‚ö†Ô∏è Ollama service not available")
                except FileNotFoundError:
                    console.print(f"  ‚ö†Ô∏è Ollama not installed")
            
            return True
            
        except Exception as e:
            console.print(f"  ‚ùå Ollama integration error: {e}")
            return False
    
    def test_browser_system(self) -> bool:
        """Test browser automation system."""
        try:
            from playwright.sync_api import sync_playwright
            
            if not self.profile:
                console.print(f"  ‚ö†Ô∏è Skipping browser test - no profile loaded")
                return True
            
            # Test browser context creation using simpler approach
            with sync_playwright() as p:
                try:
                    # Use simpler browser approach instead of complex BrowserManager
                    browser = p.chromium.launch(headless=True)
                    context = browser.new_context()
                    console.print(f"  ‚úÖ Browser context created successfully")
                    
                    # Test basic page operations
                    page = context.new_page()
                    page.goto("https://example.com", timeout=5000)
                    console.print(f"  ‚úÖ Basic page operations working")
                    
                    context.close()
                    browser.close()
                    return True
                        
                except Exception as e:
                    console.print(f"  ‚ö†Ô∏è Browser test error (may need setup): {e}")
                    return True  # Not critical for system operation
            
        except Exception as e:
            console.print(f"  ‚ö†Ô∏è Browser test error (may need setup): {e}")
            return True  # Not critical for system operation
    
    def test_dashboard_api(self) -> bool:
        """Test dashboard API functionality."""
        try:
            from src.dashboard.api import app
            
            # Test that the app can be imported and has expected endpoints
            if hasattr(app, 'routes'):
                console.print(f"  ‚úÖ Dashboard API functions working")
                return True
            else:
                console.print(f"  ‚ùå Dashboard API missing routes")
                return False
            
        except Exception as e:
            console.print(f"  ‚ùå Dashboard API error: {e}")
            return False
    
    def test_session_management(self) -> bool:
        """Test session management system."""
        try:
            from scrapers.session_manager import CookieSessionManager
            
            # Test session manager
            manager = CookieSessionManager(
                cookie_file="test_cookies.json",
                session_file="test_session.json",
                site_name="test"
            )
            
            console.print(f"  ‚úÖ Session management working")
            return True
            
        except Exception as e:
            console.print(f"  ‚ùå Session management test error: {e}")
            return False
    
    def print_results(self, passed: int, total: int):
        """Print test results summary."""
        table = Table(title="Test Results")
        table.add_column("Test", style="cyan")
        table.add_column("Status", style="magenta")
        
        for test_name, result in self.results.items():
            status = "‚úÖ PASS" if result else "‚ùå FAIL"
            table.add_row(test_name, status)
        
        console.print(table)
        
        if passed == total:
            console.print(f"\nüéâ All {total} tests passed!")
        else:
            console.print(f"\n‚ö†Ô∏è {passed}/{total} tests passed. Some components need attention.")
        
        if passed < total:
            console.print("\n‚ùå System integration test failed. Please fix the issues above.")

if __name__ == "__main__":
    tester = SystemIntegrationTest()
    success = tester.run_all_tests()
    sys.exit(0 if success else 1)