[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "joblens"
version = "2.0.0"
description = "Profile-driven job scraping, matching, and ranking"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "JobLens Team"},
    {email = "dev@joblens.dev"}
]
keywords = ["job-discovery", "matching", "ranking", "profile", "web-scraping"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]
requires-python = ">=3.11"
dependencies = [
    # Core web scraping
    "requests>=2.28.0",
    "beautifulsoup4>=4.11.0",
    "playwright>=1.42.0",
    
    # Document processing
    "python-docx>=0.8.11",
    "openpyxl>=3.0.10",
    
    # Dashboard - Streamlit
    "streamlit>=1.28.0",
    "pandas>=2.0.0",
    "plotly>=5.15.0",
    "streamlit-aggrid>=0.3.4",
    "streamlit-autorefresh>=0.3.1",
    
    # Utilities and CLI
    "rich>=13.3.5",
    "click>=8.1.0",
    "python-dotenv>=1.0.0",
    
    # Testing
    "pytest>=7.3.1",
    
    # Code formatting
    "black>=23.0.0",
]

[project.optional-dependencies]
gemini = [
    "google-generativeai>=0.3.0",
    "reportlab>=4.0.0",
    "pathlib2>=2.3.0",
    "typing-extensions>=4.8.0",
    "PyPDF2>=3.0.0"
]
neural-network = [
    "torch>=2.1.0",
    "torchvision>=0.16.0",
    "torchaudio>=2.1.0",
    "transformers>=4.36.0",
    "accelerate>=0.24.0",
    "datasets>=2.14.0",
    "peft>=0.7.0",
    "bitsandbytes>=0.41.0",
    "wandb>=0.16.0",
    "tensorboard>=2.15.0",
    "scikit-learn>=1.3.0",
    "tokenizers>=0.15.0",
    "sentencepiece>=0.1.99",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "gradio>=3.50.0",
    "flash-attn>=2.3.0",
    "deepspeed>=0.12.0",
    "xformers>=0.0.22",
    "rouge-score>=0.1.2",
    "bleu>=0.4.0",
    "tqdm>=4.66.0"
]
tensorflow = [
    "tensorflow>=2.15.0",
    "keras>=2.15.0",
    "transformers[tf]>=4.36.0",
    "datasets>=2.14.0",
    "tokenizers>=0.15.0",
    "sentencepiece>=0.1.99",
    "tensorboard>=2.15.0",
    "wandb>=0.16.0",
    "tensorflow-addons>=0.22.0",
    "tensorflow-model-optimization>=0.7.4",
    "tf-keras-vis>=0.8.0",
    "tensorflow-text>=2.15.0",
    "tensorflow-datasets>=4.9.0",
    "tensorflow-serving-api>=2.15.0",
    "rouge-score>=0.1.2",
    "bleu>=0.4.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "tqdm>=4.66.0"
]
development = [
    "pytest>=7.3.1",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.3.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.3.0",
    "pre-commit>=3.3.0",
    "flake8>=6.0.0",
    "coverage>=7.0.0"
]
all = ["automate-job[gemini,neural-network,tensorflow,development]"]

[project.scripts]
automate-job = "src.main:main"
job-dashboard = "src.dashboard.app:main"
job-worker = "src.services.worker:main"
job-scraper = "src.scrapers.launcher:main"
job-benchmark = "src.benchmarks.runner:main"

[project.urls]
Homepage = "https://github.com/NirajanKhadka/automate_job_idea001"
Repository = "https://github.com/NirajanKhadka/automate_job_idea001"
Issues = "https://github.com/NirajanKhadka/automate_job_idea001/issues"
Documentation = "https://github.com/NirajanKhadka/automate_job_idea001/blob/main/README.md"

[tool.setuptools.packages.find]
where = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers --cov=src --cov-report=html --cov-report=term-missing"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance benchmarks",
    "e2e: marks tests as end-to-end tests"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
known_third_party = ["pytest", "streamlit", "pandas", "numpy"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
